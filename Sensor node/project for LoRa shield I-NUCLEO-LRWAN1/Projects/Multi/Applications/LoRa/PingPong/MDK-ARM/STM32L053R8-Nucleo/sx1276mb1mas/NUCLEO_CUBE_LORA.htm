<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\sx1276mb1mas\NUCLEO_CUBE_LORA.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\sx1276mb1mas\NUCLEO_CUBE_LORA.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Feb 09 15:26:13 2019
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; HW_Init &rArr; HW_RTC_Init &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from main.o(i.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from stm32l0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from stm32l0xx_it.o(i.EXTI2_3_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from stm32l0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from stm32l0xx_it.o(i.I2C1_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[2a]">I2C_DMAAbort</a> from stm32l0xx_hal_i2c.o(i.I2C_DMAAbort) referenced from stm32l0xx_hal_i2c.o(i.I2C_ITError)
 <LI><a href="#[28]">I2C_Master_ISR_DMA</a> from stm32l0xx_hal_i2c.o(i.I2C_Master_ISR_DMA) referenced from stm32l0xx_hal_i2c.o(i.I2C_Enable_IRQ)
 <LI><a href="#[24]">I2C_Master_ISR_IT</a> from stm32l0xx_hal_i2c.o(i.I2C_Master_ISR_IT) referenced from stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Receive_IT)
 <LI><a href="#[24]">I2C_Master_ISR_IT</a> from stm32l0xx_hal_i2c.o(i.I2C_Master_ISR_IT) referenced from stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Sequential_Transmit_IT)
 <LI><a href="#[24]">I2C_Master_ISR_IT</a> from stm32l0xx_hal_i2c.o(i.I2C_Master_ISR_IT) referenced from stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Transmit_IT)
 <LI><a href="#[29]">I2C_Slave_ISR_DMA</a> from stm32l0xx_hal_i2c.o(i.I2C_Slave_ISR_DMA) referenced from stm32l0xx_hal_i2c.o(i.I2C_Enable_IRQ)
 <LI><a href="#[2b]">I2C_Slave_ISR_IT</a> from stm32l0xx_hal_i2c.o(i.I2C_Slave_ISR_IT) referenced from stm32l0xx_hal_i2c.o(i.I2C_ITError)
 <LI><a href="#[1f]">LCD_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[13]">LPTIM1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l0xx_it.o(i.NMI_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32l0xx_it.o(i.PendSV_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[a]">RCC_CRS_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1e]">RNG_LPUART1_IRQHandler</a> from stm32l0xx_it.o(i.RNG_LPUART1_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from stm32l0xx_it.o(i.RTC_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32l0xx_it.o(i.SVC_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[39]">SX1272CheckRfFrequency</a> from sx1272mb2das.o(i.SX1272CheckRfFrequency) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[32]">SX1272GetStatus</a> from sx1272.o(i.SX1272GetStatus) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[3a]">SX1272GetTimeOnAir</a> from sx1272.o(i.SX1272GetTimeOnAir) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[31]">SX1272Init</a> from sx1272.o(i.SX1272Init) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[30]">SX1272IoDeInit</a> from sx1272mb2das.o(i.SX1272IoDeInit) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[2f]">SX1272IoInit</a> from sx1272mb2das.o(i.SX1272IoInit) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[35]">SX1272IsChannelFree</a> from sx1272.o(i.SX1272IsChannelFree) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[48]">SX1272OnDio0Irq</a> from sx1272.o(i.SX1272OnDio0Irq) referenced from sx1272.o(.data)
 <LI><a href="#[49]">SX1272OnDio1Irq</a> from sx1272.o(i.SX1272OnDio1Irq) referenced from sx1272.o(.data)
 <LI><a href="#[4a]">SX1272OnDio2Irq</a> from sx1272.o(i.SX1272OnDio2Irq) referenced from sx1272.o(.data)
 <LI><a href="#[4b]">SX1272OnDio3Irq</a> from sx1272.o(i.SX1272OnDio3Irq) referenced from sx1272.o(.data)
 <LI><a href="#[4c]">SX1272OnDio4Irq</a> from sx1272.o(i.SX1272OnDio4Irq) referenced from sx1272.o(.data)
 <LI><a href="#[2c]">SX1272OnTimeoutIrq</a> from sx1272.o(i.SX1272OnTimeoutIrq) referenced from sx1272.o(i.SX1272Init)
 <LI><a href="#[36]">SX1272Random</a> from sx1272.o(i.SX1272Random) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[43]">SX1272Read</a> from sx1272.o(i.SX1272Read) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[45]">SX1272ReadBuffer</a> from sx1272.o(i.SX1272ReadBuffer) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[41]">SX1272ReadRssi</a> from sx1272.o(i.SX1272ReadRssi) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[3b]">SX1272Send</a> from sx1272.o(i.SX1272Send) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[34]">SX1272SetChannel</a> from sx1272.o(i.SX1272SetChannel) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[47]">SX1272SetMaxPayloadLength</a> from sx1272.o(i.SX1272SetMaxPayloadLength) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[33]">SX1272SetModem</a> from sx1272.o(i.SX1272SetModem) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[3e]">SX1272SetRx</a> from sx1272.o(i.SX1272SetRx) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[37]">SX1272SetRxConfig</a> from sx1272.o(i.SX1272SetRxConfig) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[3c]">SX1272SetSleep</a> from sx1272.o(i.SX1272SetSleep) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[3d]">SX1272SetStby</a> from sx1272.o(i.SX1272SetStby) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[46]">SX1272SetSyncWord</a> from sx1272.o(i.SX1272SetSyncWord) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[38]">SX1272SetTxConfig</a> from sx1272.o(i.SX1272SetTxConfig) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[40]">SX1272SetTxContinuousWave</a> from sx1272.o(i.SX1272SetTxContinuousWave) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[3f]">SX1272StartCad</a> from sx1272.o(i.SX1272StartCad) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[42]">SX1272Write</a> from sx1272.o(i.SX1272Write) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[44]">SX1272WriteBuffer</a> from sx1272.o(i.SX1272WriteBuffer) referenced from sx1272mb2das.o(.constdata)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[22]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l053xx.o(.text)
 <LI><a href="#[16]">TIM21_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[17]">TIM22_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[14]">TIM2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[15]">TIM6_DAC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[e]">TSC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[27]">UART_DMAError</a> from stm32l0xx_hal_uart.o(i.UART_DMAError) referenced from stm32l0xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[25]">UART_DMAReceiveCplt</a> from stm32l0xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32l0xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[26]">UART_DMARxHalfCplt</a> from stm32l0xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32l0xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[1c]">USART1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1d]">USART2_IRQHandler</a> from stm32l0xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[20]">USB_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[23]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l053xx.o(.text)
 <LI><a href="#[2e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[2d]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[21]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[63]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[109]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[10a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[10b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[10c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[10d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetChannel
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRx
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272IoInit
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272IoDeInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Reset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRx
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272GetTimeOnAir
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxContinuousWave
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRx
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272GetTimeOnAir
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxConfig
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRxConfig
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRx
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272GetTimeOnAir
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[db]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRx
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272GetTimeOnAir
</UL>

<P><STRONG><a name="[113]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272GetTimeOnAir
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxContinuousWave
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxConfig
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRxConfig
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRx
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272GetTimeOnAir
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxContinuousWave
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxConfig
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRxConfig
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRx
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272GetTimeOnAir
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272GetTimeOnAir
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[114]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[115]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[116]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[57]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[61]"></a>_drnd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[119]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.DMA1_Channel2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel2_3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DelayMs</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delay.o(i.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DelayMs &rArr; HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Send
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Random
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272IsChannelFree
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Reset
</UL>

<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>Error_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, debug.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Error_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[64]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 634 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>HAL_DMA_Init</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[6a]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[6c]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_IrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[67]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>HAL_GPIO_Init</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[b1]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>

<P><STRONG><a name="[8a]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>

<P><STRONG><a name="[d8]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[c7]"></a>HAL_I2C_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_AbortCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[ca]"></a>HAL_I2C_AddrCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_AddrCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
</UL>

<P><STRONG><a name="[6e]"></a>HAL_I2C_ER_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_EV_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_I2C_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[70]"></a>HAL_I2C_Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_I2C_ListenCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_ListenCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
</UL>

<P><STRONG><a name="[72]"></a>HAL_I2C_MasterRxCpltCallback</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, main.o(i.HAL_I2C_MasterRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MasterRxCpltCallback &rArr; HAL_I2C_Master_Transmit_IT &rArr; I2C_TransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_IT
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSequentialCplt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[75]"></a>HAL_I2C_MasterTxCpltCallback</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, main.o(i.HAL_I2C_MasterTxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MasterTxCpltCallback &rArr; HAL_I2C_Master_Transmit_IT &rArr; I2C_TransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_IT
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Transmit_IT
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSequentialCplt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[76]"></a>HAL_I2C_Master_Receive_IT</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_I2C_Master_Receive_IT &rArr; I2C_TransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>

<P><STRONG><a name="[73]"></a>HAL_I2C_Master_Sequential_Transmit_IT</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Sequential_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_I2C_Master_Sequential_Transmit_IT &rArr; I2C_TransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
</UL>

<P><STRONG><a name="[74]"></a>HAL_I2C_Master_Transmit_IT</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_I2C_Master_Transmit_IT &rArr; I2C_TransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
</UL>

<P><STRONG><a name="[d1]"></a>HAL_I2C_MemRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_MemRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[d0]"></a>HAL_I2C_MemTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_MemTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[71]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stm32l0xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_I2C_SlaveRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_SlaveRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[d4]"></a>HAL_I2C_SlaveTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_SlaveTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[f0]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7d]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Init &rArr; HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l0xx_hal_msp.o(i.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[7f]"></a>HAL_MspInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUltraLowPower
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableFastWakeUp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisablePVD
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Print
</UL>

<P><STRONG><a name="[7c]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>

<P><STRONG><a name="[7b]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>HAL_PWREx_EnableFastWakeUp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_EnableFastWakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[81]"></a>HAL_PWREx_EnableUltraLowPower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_EnableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[80]"></a>HAL_PWR_DisablePVD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_DisablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[84]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[89]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[8b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[88]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[86]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[87]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[8c]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1116 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[91]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTCEx_EnableBypassShadow
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[8e]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[90]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>

<P><STRONG><a name="[92]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[93]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[95]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[96]"></a>HAL_RTC_Init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[97]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, stm32l0xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[99]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[9b]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[9d]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[9c]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[9e]"></a>HAL_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[9f]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[a0]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
</UL>

<P><STRONG><a name="[f8]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[a2]"></a>HAL_UART_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_UART_MspInit</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, stm32l0xx_hw.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[a9]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, main.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[f9]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[aa]"></a>HAL_UART_Transmit</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Print
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[ac]"></a>HW_GPIO_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hw_gpio.o(i.HW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272IoInit
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272IoDeInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Reset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[6d]"></a>HW_GPIO_IrqHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hw_gpio.o(i.HW_GPIO_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_GetBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[ae]"></a>HW_GPIO_SetIrq</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hw_gpio.o(i.HW_GPIO_SetIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_GPIO_SetIrq &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_GetIRQn
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_GetBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272IoIrqInit
</UL>

<P><STRONG><a name="[b0]"></a>HW_GPIO_Write</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hw_gpio.o(i.HW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272WriteBuffer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272ReadBuffer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetAntSw
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Reset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[b2]"></a>HW_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l0xx_hw.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HW_Init &rArr; HW_RTC_Init &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>HW_RTC_DelayMs</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[f5]"></a>HW_RTC_GetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_rtc.o(i.HW_RTC_GetMinimumTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[f4]"></a>HW_RTC_GetTimerContext</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_rtc.o(i.HW_RTC_GetTimerContext))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[b7]"></a>HW_RTC_GetTimerElapsedTime</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_GetTimerElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HW_RTC_GetTimerElapsedTime &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[b5]"></a>HW_RTC_GetTimerValue</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_GetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
</UL>

<P><STRONG><a name="[b4]"></a>HW_RTC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HW_RTC_Init &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[ba]"></a>HW_RTC_IrqHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HW_RTC_IrqHandler &rArr; HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>HW_RTC_SetAlarm</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_GetState
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Enable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_Disable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[b9]"></a>HW_RTC_SetTimerContext</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_SetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HW_RTC_SetTimerContext &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[c2]"></a>HW_RTC_StopAlarm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_StopAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_RTC_StopAlarm &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[c3]"></a>HW_RTC_ms2Tick</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_ms2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>

<P><STRONG><a name="[c4]"></a>HW_SPI_InOut</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hw_spi.o(i.HW_SPI_InOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272WriteBuffer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272ReadBuffer
</UL>

<P><STRONG><a name="[b3]"></a>HW_SPI_Init</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, hw_spi.o(i.HW_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HW_SPI_Init &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = HardFault_Handler &rArr;  HardFault_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C1_IRQHandler &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>LowPower_Disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, low_power.o(i.LowPower_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[bb]"></a>LowPower_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, low_power.o(i.LowPower_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>

<P><STRONG><a name="[be]"></a>LowPower_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, low_power.o(i.LowPower_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[af]"></a>MSP_GetIRQn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32l0xx_hal_msp.o(i.MSP_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
</UL>

<P><STRONG><a name="[102]"></a>MyRadioSend</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.MyRadioSend))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.RNG_LPUART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[9a]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[98]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RTC_IRQHandler &rArr; HW_RTC_IrqHandler &rArr; HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SX1272CheckRfFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1272mb2das.o(i.SX1272CheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>SX1272GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1272.o(i.SX1272GetStatus))
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>SX1272GetTimeOnAir</STRONG> (Thumb, 446 bytes, Stack size 80 bytes, sx1272.o(i.SX1272GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SX1272GetTimeOnAir &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>SX1272Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, sx1272.o(i.SX1272Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SX1272Init &rArr; SX1272Reset &rArr; DelayMs &rArr; HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetModem
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272IoIrqInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetOpMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>SX1272IoDeInit</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, sx1272mb2das.o(i.SX1272IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1272IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>SX1272IoInit</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, sx1272mb2das.o(i.SX1272IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1272IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>SX1272IoIrqInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sx1272mb2das.o(i.SX1272IoIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1272IoIrqInit &rArr; HW_GPIO_SetIrq &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Init
</UL>

<P><STRONG><a name="[35]"></a>SX1272IsChannelFree</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sx1272.o(i.SX1272IsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1272IsChannelFree &rArr; SX1272SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetSleep
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetModem
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetChannel
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272ReadRssi
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>SX1272OnDio0Irq</STRONG> (Thumb, 536 bytes, Stack size 24 bytes, sx1272.o(i.SX1272OnDio0Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX1272OnDio0Irq &rArr; vcom_Send &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272ReadFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>SX1272OnDio1Irq</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, sx1272.o(i.SX1272OnDio1Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1272OnDio1Irq &rArr; vcom_Send &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272WriteFifo
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272ReadFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>SX1272OnDio2Irq</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, sx1272.o(i.SX1272OnDio2Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1272OnDio2Irq &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>SX1272OnDio3Irq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sx1272.o(i.SX1272OnDio3Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SX1272OnDio3Irq &rArr; SX1272Write &rArr; SX1272WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>SX1272OnDio4Irq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sx1272.o(i.SX1272OnDio4Irq))
<BR>[Address Reference Count : 1]<UL><LI> sx1272.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>SX1272OnTimeoutIrq</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sx1272.o(i.SX1272OnTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1272OnTimeoutIrq &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272.o(i.SX1272Init)
</UL>
<P><STRONG><a name="[36]"></a>SX1272Random</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sx1272.o(i.SX1272Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1272Random &rArr; SX1272SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetSleep
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetModem
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>SX1272Read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1272.o(i.SX1272Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1272Read &rArr; SX1272ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272StartCad
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxContinuousWave
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxConfig
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRxConfig
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRx
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetModem
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Send
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272ReadRssi
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Random
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272GetTimeOnAir
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRfTxPower
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetOpMode
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnTimeoutIrq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio3Irq
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio2Irq
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio1Irq
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio0Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>SX1272ReadBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1272.o(i.SX1272ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1272ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272ReadFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>SX1272ReadFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1272.o(i.SX1272ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1272ReadFifo &rArr; SX1272ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio1Irq
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio0Irq
</UL>

<P><STRONG><a name="[41]"></a>SX1272ReadRssi</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sx1272.o(i.SX1272ReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1272ReadRssi &rArr; SX1272Read &rArr; SX1272ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>SX1272Reset</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, sx1272.o(i.SX1272Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SX1272Reset &rArr; DelayMs &rArr; HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Init
</UL>

<P><STRONG><a name="[3b]"></a>SX1272Send</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, sx1272.o(i.SX1272Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1272Send &rArr; SX1272SetTx &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetStby
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272WriteFifo
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>SX1272SetAntSw</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sx1272mb2das.o(i.SX1272SetAntSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1272SetAntSw &rArr; HW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetOpMode
</UL>

<P><STRONG><a name="[ec]"></a>SX1272SetAntSwLowPower</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1272mb2das.o(i.SX1272SetAntSwLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetOpMode
</UL>

<P><STRONG><a name="[34]"></a>SX1272SetChannel</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx1272.o(i.SX1272SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1272SetChannel &rArr; SX1272Write &rArr; SX1272WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxContinuousWave
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>SX1272SetMaxPayloadLength</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sx1272.o(i.SX1272SetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1272SetMaxPayloadLength &rArr; SX1272SetModem &rArr; SX1272SetOpMode &rArr; SX1272Write &rArr; SX1272WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>SX1272SetModem</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, sx1272.o(i.SX1272SetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1272SetModem &rArr; SX1272SetOpMode &rArr; SX1272Write &rArr; SX1272WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetSyncWord
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRxConfig
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetMaxPayloadLength
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Random
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272IsChannelFree
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>SX1272SetOpMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sx1272.o(i.SX1272SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SX1272SetOpMode &rArr; SX1272Write &rArr; SX1272WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetAntSwLowPower
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetAntSw
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272StartCad
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxContinuousWave
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetStby
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetSleep
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRx
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetModem
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Random
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272IsChannelFree
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTx
</UL>

<P><STRONG><a name="[ed]"></a>SX1272SetRfTxPower</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sx1272mb2das.o(i.SX1272SetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1272SetRfTxPower &rArr; SX1272Write &rArr; SX1272WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxConfig
</UL>

<P><STRONG><a name="[3e]"></a>SX1272SetRx</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, sx1272.o(i.SX1272SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1272SetRx &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetOpMode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>SX1272SetRxConfig</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, sx1272.o(i.SX1272SetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1272SetRxConfig &rArr; SX1272SetModem &rArr; SX1272SetOpMode &rArr; SX1272Write &rArr; SX1272WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFskBandwidthRegValue
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetModem
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>SX1272SetSleep</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1272.o(i.SX1272SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1272SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Random
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>SX1272SetStby</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1272.o(i.SX1272SetStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1272SetStby &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>SX1272SetSyncWord</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1272.o(i.SX1272SetSyncWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1272SetSyncWord &rArr; SX1272SetModem &rArr; SX1272SetOpMode &rArr; SX1272Write &rArr; SX1272WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>SX1272SetTx</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, sx1272.o(i.SX1272SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1272SetTx &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Send
</UL>

<P><STRONG><a name="[38]"></a>SX1272SetTxConfig</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, sx1272.o(i.SX1272SetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1272SetTxConfig &rArr; SX1272SetModem &rArr; SX1272SetOpMode &rArr; SX1272Write &rArr; SX1272WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetModem
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRfTxPower
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxContinuousWave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>SX1272SetTxContinuousWave</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, sx1272.o(i.SX1272SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX1272SetTxContinuousWave &rArr; SX1272SetTxConfig &rArr; SX1272SetModem &rArr; SX1272SetOpMode &rArr; SX1272Write &rArr; SX1272WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxConfig
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetChannel
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>SX1272StartCad</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sx1272.o(i.SX1272StartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1272StartCad &rArr; SX1272SetOpMode &rArr; SX1272Write &rArr; SX1272WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>SX1272Write</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, sx1272.o(i.SX1272Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1272Write &rArr; SX1272WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272StartCad
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxContinuousWave
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetSyncWord
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRxConfig
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRx
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetModem
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetMaxPayloadLength
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetChannel
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Send
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Random
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRfTxPower
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetOpMode
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnTimeoutIrq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio3Irq
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio2Irq
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio1Irq
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio0Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>SX1272WriteBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1272.o(i.SX1272WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1272WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Write
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272WriteFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1272mb2das.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>SX1272WriteFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1272.o(i.SX1272WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1272WriteFifo &rArr; SX1272WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Send
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio1Irq
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>SystemClock_Config</STRONG> (Thumb, 130 bytes, Stack size 88 bytes, stm32l0xx_hw.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>TimerInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timeserver.o(i.TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Init
</UL>

<P><STRONG><a name="[8f]"></a>TimerIrqHandler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, timeserver.o(i.TimerIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerContext
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[ee]"></a>TimerSetValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timeserver.o(i.TimerSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxContinuousWave
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRx
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTx
</UL>

<P><STRONG><a name="[e5]"></a>TimerStart</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, timeserver.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTxContinuousWave
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRx
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetTx
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnTimeoutIrq
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio0Irq
</UL>

<P><STRONG><a name="[e4]"></a>TimerStop</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, timeserver.o(i.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetStby
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetSleep
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnTimeoutIrq
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio2Irq
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio1Irq
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio0Irq
</UL>

<P><STRONG><a name="[a4]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a6]"></a>UART_CheckIdleState</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a5]"></a>UART_SetConfig</STRONG> (Thumb, 498 bytes, Stack size 32 bytes, stm32l0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ab]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[1d]"></a>USART2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART2_IRQHandler &rArr; vcom_Print &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11a]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[69]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[11b]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[11c]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[fe]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11d]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[11e]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[11f]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[105]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>

<P><STRONG><a name="[60]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[fa]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[120]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[121]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[122]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[dd]"></a>ceil</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRx
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272GetTimeOnAir
</UL>

<P><STRONG><a name="[df]"></a>floor</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272GetTimeOnAir
</UL>

<P><STRONG><a name="[2d]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[21]"></a>main</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; HW_Init &rArr; HW_RTC_Init &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRadioSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Transmit_IT
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[e9]"></a>memcpy1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, utilities.o(i.memcpy1))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272Send
</UL>

<P><STRONG><a name="[dc]"></a>round</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272GetTimeOnAir
</UL>

<P><STRONG><a name="[fb]"></a>vcom_Print</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, vcom.o(i.vcom_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vcom_Print &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>vcom_Send</STRONG> (Thumb, 114 bytes, Stack size 168 bytes, vcom.o(i.vcom_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = vcom_Send &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio1Irq
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272OnDio0Irq
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ef]"></a>GetFskBandwidthRegValue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sx1272.o(i.GetFskBandwidthRegValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFskBandwidthRegValue
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1272SetRxConfig
</UL>

<P><STRONG><a name="[a1]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[27]"></a>UART_DMAError</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[25]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[26]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[f7]"></a>UART_EndRxTransfer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[f6]"></a>UART_EndTxTransfer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[8d]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l0xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[83]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[6b]"></a>DMA_SetConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l0xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2a]"></a>I2C_DMAAbort</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32l0xx_hal_i2c.o(i.I2C_DMAAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DMAAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_i2c.o(i.I2C_ITError)
</UL>
<P><STRONG><a name="[c9]"></a>I2C_Disable_IRQ</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32l0xx_hal_i2c.o(i.I2C_Disable_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSequentialCplt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
</UL>

<P><STRONG><a name="[78]"></a>I2C_Enable_IRQ</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_Enable_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Enable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_IT
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Transmit_IT
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_IT
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
</UL>

<P><STRONG><a name="[cf]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[c8]"></a>I2C_ITAddrCplt</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_ITAddrCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_ITAddrCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[6f]"></a>I2C_ITError</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_ITError))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_ITError &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[cc]"></a>I2C_ITListenCplt</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_ITListenCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_ITListenCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[ce]"></a>I2C_ITMasterCplt</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_ITMasterCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_ITMasterCplt &rArr; HAL_I2C_MasterTxCpltCallback &rArr; HAL_I2C_Master_Transmit_IT &rArr; I2C_TransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
</UL>

<P><STRONG><a name="[d2]"></a>I2C_ITMasterSequentialCplt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_ITMasterSequentialCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_ITMasterSequentialCplt &rArr; HAL_I2C_MasterTxCpltCallback &rArr; HAL_I2C_Master_Transmit_IT &rArr; I2C_TransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
</UL>

<P><STRONG><a name="[d3]"></a>I2C_ITSlaveCplt</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_ITSlaveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_DMA
</UL>

<P><STRONG><a name="[d6]"></a>I2C_ITSlaveSequentialCplt</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_ITSlaveSequentialCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_ITSlaveSequentialCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[28]"></a>I2C_Master_ISR_DMA</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_Master_ISR_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_Master_ISR_DMA &rArr; I2C_ITMasterCplt &rArr; HAL_I2C_MasterTxCpltCallback &rArr; HAL_I2C_Master_Transmit_IT &rArr; I2C_TransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_i2c.o(i.I2C_Enable_IRQ)
</UL>
<P><STRONG><a name="[24]"></a>I2C_Master_ISR_IT</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_Master_ISR_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_Master_ISR_IT &rArr; I2C_ITMasterCplt &rArr; HAL_I2C_MasterTxCpltCallback &rArr; HAL_I2C_Master_Transmit_IT &rArr; I2C_TransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSequentialCplt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Receive_IT)
<LI> stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Sequential_Transmit_IT)
<LI> stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Transmit_IT)
</UL>
<P><STRONG><a name="[29]"></a>I2C_Slave_ISR_DMA</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32l0xx_hal_i2c.o(i.I2C_Slave_ISR_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_Slave_ISR_DMA &rArr; I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_i2c.o(i.I2C_Enable_IRQ)
</UL>
<P><STRONG><a name="[2b]"></a>I2C_Slave_ISR_IT</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_Slave_ISR_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2C_Slave_ISR_IT &rArr; I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_i2c.o(i.I2C_ITError)
</UL>
<P><STRONG><a name="[77]"></a>I2C_TransferConfig</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_IT
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Transmit_IT
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_IT
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
</UL>

<P><STRONG><a name="[ad]"></a>HW_GPIO_GetBitPos</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hw_gpio.o(i.HW_GPIO_GetBitPos))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_IrqHandler
</UL>

<P><STRONG><a name="[b6]"></a>HW_RTC_GetCalendarValue</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, hw_rtc.o(i.HW_RTC_GetCalendarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
</UL>

<P><STRONG><a name="[b8]"></a>HW_RTC_SetConfig</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[bf]"></a>HW_RTC_StartWakeUpAlarm</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, hw_rtc.o(i.HW_RTC_StartWakeUpAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[d7]"></a>MX_I2C1_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>MX_LPUART1_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_LPUART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_LPUART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timeserver.o(i.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[f3]"></a>TimerSetTimeout</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timeserver.o(i.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[ff]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fd]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[101]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[100]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
